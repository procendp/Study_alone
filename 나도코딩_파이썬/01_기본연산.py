########################################################################
print(5)
print(-10)
print(3.14) #실수형도 커버 가능
print(1000)
print(5+3)
print(2*3)
print(3*(3+1)) #연산 가능
print('풍선') #문자형도 가능
print("ㅋ" * 9) #이게 되네....

#자료형이 따로 없는건가..?
########################################################################

########################################################################
#boolean
# 참 / 거짓
print() #빈칸출력
print(5 > 10)
print(5 < 10)
print(True)
print(False)
print(not True)
print(not False)
print(not (5 > 10))
########################################################################

########################################################################
#문자열 치환

animal = "강아지"
name = "연탄이"
age = 4
hobby = "산책"
is_adult = age >= 3 #나이가 3살 이상이면 어른으로 간다.

# 기본
# print("우리집 강아지 이름 연탄이")
# print("연탄이 나이 4살, 산책 좋아해")
# print("연탄이는 어른? True")

# 변경방법
# [+ animal +] 형태

print("우리집 " + animal + " 이름 " + name + "")
# print("" + name + " " + str(age) + " 살, " + hobby + " 좋아해") #str(age)를 해야 정수형을 문자형태로 출력함. 안그러면 오류남
print(name, age, " 살, ", hobby, " 좋아해") #바로 위랑 같음. 콤마로도 표현 가능, 공백 한칸 생김.
print("" + name + " 어른? " + str(is_adult) + "") #is_adult와 같은 불리언 형태도 마찬가지.
# 이렇게 위의 변수만 바꿔서 하면 한번에 다 바꿀 수 있다.

########################################################################

########################################################################
#연산자
print(1+1) # 2
print(5*2) # 10

print(2**3) # 2^3 = 8 // 제곱을 뜻함.
print(5%3)  # 나머지 2
print(5//3) # 몫 1 ...슬래시 2개

print(10 > 3) # True
print(4 >= 7) # False
print(10 < 3) # False
print(5 <= 5) # True

print(3 == 3) #True
print(4 == 2) #False

print(1 != 3) #True
print(not (1 != 3)) #False

print((3 > 0) and (3 < 5)) #True
print((3 > 0) & (3 < 5)) #True

print((3 > 0) or (3 < 5)) #True
print((3 > 0) | (3 < 5)) #True

print(5 > 4 > 3) #True
print(5 > 4 > 7) #False
########################################################################

########################################################################
#숫자처리함수
print(abs(-5)) #절대값 5
print(pow(4, 2)) #제곱 4^2 = 16
print(max(5, 12)) #최대값 12
print(min(5, 12)) #최소값 5
print(round(3.14)) #반올림 3
print(round(4.99)) #반올림 5

#math 라이브러리를 이용하는 방법도 있음.
from math import *
print(floor(4.99)) #내림 4
print(ceil(3.14)) #올림 4
print(sqrt(16)) #제곱근 4

#random 함수
from random import *

print(random()) #0.0 이상 ~ 1.0 미만의 임의의 값 생성
print(random() * 10) #0.0 이상 ~ 10.0 미만의 임의의 값 생성
print(int(random() * 10)) #0 이상 ~ 10 미만의 임의의 값 생성
print(int(random() * 10)) #0 이상 ~ 10 미만의 임의의 값 생성
print(int(random() * 10)) #0 이상 ~ 10 미만의 임의의 값 생성
print(int(random() * 10) + 1) #1 이상 ~ 10 이하의 임의의 값 생성 //앞에만 1 더해지나보다.
print(int(random() * 10) + 1) #1 이상 ~ 10 이하의 임의의 값 생성
print(int(random() * 10) + 1) #1 이상 ~ 10 이하의 임의의 값 생성
print(int(random() * 10) + 1) #1 이상 ~ 10 이하의 임의의 값 생성
print(int(random() * 10) + 1) #1 이상 ~ 10 이하의 임의의 값 생성
print(int(random() * 10) + 1) #1 이상 ~ 10 이하의 임의의 값 생성
print()

#Quiz. 로또만들기
print(int(random() * 45) + 1) #1 이상 ~ 45 이하의 임의의 값 생성
print(int(random() * 45) + 1) #1 이상 ~ 45 이하의 임의의 값 생성
print(int(random() * 45) + 1) #1 이상 ~ 45 이하의 임의의 값 생성
print(int(random() * 45) + 1) #1 이상 ~ 45 이하의 임의의 값 생성
print(int(random() * 45) + 1) #1 이상 ~ 45 이하의 임의의 값 생성
print(int(random() * 45) + 1) #1 이상 ~ 45 이하의 임의의 값 생성
print()

#위 로또를 더 쉽게 하려면
print(randrange(1, 46)) #1 이상 ~ 46 미만의 임의의 값 생성
print(randrange(1, 46)) #1 이상 ~ 46 미만의 임의의 값 생성
print(randrange(1, 46)) #1 이상 ~ 46 미만의 임의의 값 생성
print(randrange(1, 46)) #1 이상 ~ 46 미만의 임의의 값 생성
print(randrange(1, 46)) #1 이상 ~ 46 미만의 임의의 값 생성
print(randrange(1, 46)) #1 이상 ~ 46 미만의 임의의 값 생성
print()

#이 randrange도 미만으로 귀찮다면
print(randint(1, 45)) #1 이상 ~ 45 이하의 임의의 값 생성<첫, 끝 숫자 포함>
print(randint(1, 45)) #1 이상 ~ 45 이하의 임의의 값 생성<첫, 끝 숫자 포함>
print(randint(1, 45)) #1 이상 ~ 45 이하의 임의의 값 생성<첫, 끝 숫자 포함>
print(randint(1, 45)) #1 이상 ~ 45 이하의 임의의 값 생성<첫, 끝 숫자 포함>
print(randint(1, 45)) #1 이상 ~ 45 이하의 임의의 값 생성<첫, 끝 숫자 포함>
print(randint(1, 45)) #1 이상 ~ 45 이하의 임의의 값 생성<첫, 끝 숫자 포함>
